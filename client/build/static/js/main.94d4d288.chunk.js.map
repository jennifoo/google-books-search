{"version":3,"sources":["utils/GlobalState.js","utils/actions.js","components/Header/index.js","utils/API.js","pages/Home/index.js","pages/Save/index.js","App.js","serviceWorker.js","index.js"],"names":["StoreContext","createContext","Provider","reducer","state","action","type","searchResults","books","filter","elem","_id","StoreProvider","value","props","useReducer","dispatch","useStoreContext","useContext","Header","id","className","to","style","marginRight","axios","get","bookData","post","searchTerm","delete","Home","srchRef","useRef","onSubmit","e","preventDefault","searchRef","current","split","join","API","then","res","callback","data","items","map","volumeInfo","indx","title","authors","description","image","imageLinks","smallThumbnail","link","infoLink","formatResult","responseArray","catch","err","console","log","placeholder","ref","index","key","target","href","onClick","saveItem","result","handleSave","src","Save","results","handleDelete","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.94d4d288.chunk.js","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\nimport {\n  SHOW_RESULTS,\n  SHOW_SAVED,\n  DELETE_BOOK\n} from \"./actions\";\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n\n  // STORE SEARCH RESULTS\n  case SHOW_RESULTS:\n    return {\n      ...state,\n      // NOTE: not doing spread here, choosing to reassign as opposed to appending to an array.\n      searchResults: action.searchResults\n    };\n\n  case SHOW_SAVED:\n    return {\n      ...state,\n      books: [...action.books]\n    };\n  case DELETE_BOOK:\n    return {\n      ...state,\n      books: state.books.filter((elem) => {\n        return elem._id !== action._id; \n      })\n    };\n  default:\n    return state;\n  }\n};\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useReducer(reducer, {\n    books: [],\n    searchResults: []\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","export const SHOW_RESULTS = \"SHOW_RESULTS\";\nexport const DELETE_BOOK = \"DELETE_BOOK\";\nexport const SHOW_SAVED = \"SHOW_SAVED\";","// Component: Header\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\nreturn (\n        <>\n        <div id=\"view-saved\" className=\"row\">\n              <div className=\"col\">\n                <Link to=\"/\" style={{marginRight: \"50px\"}}>Results</Link>\n                <Link to=\"/saved\">View Saved Books</Link>\n              </div>\n        </div>\n        <header className=\"row\">\n            <div className=\"col\">\n                <h1>Google Books Search</h1>\n                <p>Search for and Save Books of Interest</p>\n            </div>\n        </header>\n        </>\n)\n}\n\nexport default Header;","import axios from \"axios\";\n\nexport default {\n  // Gets all books from the Mongo DB\n  getBooks: function() {\n    return axios.get(\"/api/books\");\n  },\n  // Saves the selected book to the Mongo DB\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  },\n  // External API call: gets book data based on search term\n  getBookData: function({searchTerm}) {\n    let query = \"https://www.googleapis.com/books/v1/volumes?q=\";\n    let params = \"&intitle\";\n    return axios.get(query + searchTerm + params);\n  },\n  // Deletes the book with the given id from the Mongo DB\n  deleteBook: function(id) {\n    return axios.delete(\"api/books/\" + id);\n  }\n\n};\n","// PAGE: HOME \n\nimport React, { useRef } from \"react\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { SHOW_RESULTS } from \"../../utils/actions\";\nimport Header from \"../../components/Header\";\nimport API from \"../../utils/API\";\n\nfunction Home() {\n  const srchRef = useRef();\n  const [state, dispatch] = useStoreContext();\n  const handleSearch = e => {\n    e.preventDefault();\n    // dispatch({ type: LOADING });\n    let searchRef = srchRef.current.value.split(\" \").join(\"\");\n    // console.log(searchRef); // Harry Potter\n    function formatResult(res, callback) {\n      // var response = res.data.items;\n      // Array of 10 items\n      let response = res.data.items.map(({volumeInfo}, indx) => {\n        return {\n        title: volumeInfo.title,\n        authors: [volumeInfo.authors],\n        description: volumeInfo.description,\n        image: volumeInfo.imageLinks.smallThumbnail,\n        link: volumeInfo.infoLink\n      }})\n      callback(response);\n    }\n    // MAKE API CALL USING SEARCH TERM\n    API.getBookData({\n      searchTerm: searchRef\n    })\n    .then(res => {\n      // console.log(res); // Array of 10 objects containing Harry Potter in title\n      formatResult(res, function(responseArray) {\n      dispatch({\n        type: SHOW_RESULTS,\n        searchResults: responseArray\n      })\n      // console.log(\"responseArray: \", responseArray); // Array of 10 objects reduced to relevant state keys minus _id\n    })\n    }).catch(err => console.log(err));\n  }\n\n  const handleSave = (index) => {\n    let saveItem = state.searchResults[index];\n    console.log(\"Selected: \", saveItem);\n    // STORE INTO MONGOOSE DB\n    API.saveBook({\n      title: saveItem.title,\n      authors: saveItem.authors,\n      description: saveItem.description,\n      image: saveItem.image,\n      link: saveItem.link\n    })\n    .then(result => {\n      // console.log(\"Saved to DB: \", result);\n      console.log(\"Sucessfully saved book.\")\n    })\n    .catch(err => console.log(err));\n  }\n\nreturn (\n<>\n<main id=\"home\" className=\"container-fluid\">\n    <Header />\n\n    <div id=\"search\" className=\"row\">\n          <div className=\"col\">\n            <form onSubmit={handleSearch}>\n            <input placeholder=\"Search\" ref={srchRef} />\n            <button type=\"submit\">Enter</button>\n            </form>\n          </div>\n    </div>\n\n    <div className=\"row\">\n\n        <div className=\"col col-results\">\n            <h2>Results</h2>\n            \n              {state.searchResults.map((elem, index) => (\n                <div key={elem.title} className=\"result-div\">\n                  <div className=\"row\">\n                    <div className=\"col-9\">\n                      <h3>{elem.title}</h3>\n                      <p>{elem.authors.map(elem => elem)}</p>\n                    </div>\n                    <div id=\"result-button\" className=\"col-3\">\n                      <a className=\"button\" target=\"_blank\" href={elem.link}>View</a>\n                      <button onClick={() => handleSave(index)}>Save</button>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-3\">\n                      <img src={elem.image} />\n                    </div>\n                    <div className=\"col-9\">\n                      <p>{elem.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            \n        </div>\n\n    </div>\n\n</main>\n</>\n\n)}\n\nexport default Home;","// PAGE: SAVE\n\nimport React from \"react\";\nimport Header from \"../../components/Header\"\nimport API from \"../../utils/API\"\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { SHOW_SAVED, DELETE_BOOK } from \"../../utils/actions\";\n\nfunction Save() {\n  const [ state, dispatch ] = useStoreContext();\n\n  API.getBooks()\n  .then(results => {\n    // console.log(\"Get Books: \", results.data);\n    dispatch({\n      type: SHOW_SAVED,\n      books: results.data\n    })\n  })\n  .catch(err => console.log(err));\n\n  const handleDelete = (_id) => {\n    API.deleteBook(_id)\n    .then(results => {\n      dispatch({\n        type: DELETE_BOOK,\n        _id: _id\n      })\n    })\n  }\n\nreturn (\n<>\n<main id=\"post\" className=\"container-fluid\">\n    <Header />\n\n    <div className=\"row\">\n\n    <div className=\"col col-results\">\n        <h2>Saved Books</h2>\n        \n          {state.books.map((elem) => (\n            <div key={elem.title} className=\"result-div\">\n              <div className=\"row\">\n                <div className=\"col-9\">\n                  <h3>{elem.title}</h3>\n                  <p>{elem.authors.map(elem => elem)}</p>\n                </div>\n                <div id=\"result-button\" className=\"col-3\">\n                  <a className=\"button\" target=\"_blank\" href={elem.link}>View</a>\n                  <button onClick={() => handleDelete(elem._id)}>Delete</button>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-3\">\n                  <img src={elem.image} />\n                </div>\n                <div className=\"col-9\">\n                  <p>{elem.description}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n \n    </div>\n    </div>\n    \n</main>\n</>\n)\n}\n\nexport default Save;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport Home from \"./pages/Home\";\nimport Save from \"./pages/Save\";\nimport { StoreProvider } from \"./utils/GlobalState\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <StoreProvider>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/saved\">\n            <Save />\n          </Route>\n        </Switch>\n      </StoreProvider>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}